import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
%matplotlib inline #by default usually it is active
from shapely.geometry import polygon
import warnings
warnings.filterwarnings(action = "ignore")

#setting figure size and font size for all plots
plt.rcParams["figure.figsize"]=(12,10)
plt.rcParams["font.size"]=12

#create a geodataframe
world = gdp.read_file(gdp.datasets.get_path("naturalearth_lowres"))
world.plot()
europe = world[world.continent == "Europe"]
europe.plot()

#we exclude Russia and Iceland, focusing on mainland Europe
europe = europe(europe.name != "Russia") & (europe.name != "Iceland") 

world.crs #gives us the coordinate system corresponding to the world geodataframe

#create a custom polygon
polygon = Polygon([(-25, 35), (40,35), (40,75), (-25,75)])  

#makes a new geodataframe. Data is the 1000 (i.e. anything), we place the geometry and the coordinate system is that of world
poly_gdf = gpd.GeoDataFrame([1000], geometry = [polygon], crs = world.crs)

fig,ax = plt.subplots()
ax = europe.plot(ax=ax)
poly_gdf.plot(edgecolor = "red", ax = ax, alpha = 0.1) #we plot the grey area below. Just to show our focus
plt.show()

#we remove French Guinea
europe = gdp.clip(europe, polygon)
europe.plot()

#now we use the data from the dataset
df = pd.read_csv("carbon-intensity-electricity.csv")
df["Entity"].unique()
europe.name.unique()

#unmatched: countries which are present in df, but not in Europe
unmatched = []
for c in list(df["Entity"].unique()):
    if c in list(europe.name.unique()):
        pass
    else:
        unmatched.append(c)

unmatched

df.Year.unique()

#Retain values for 2010, 2015 and 2020 only
df = df[(df.Year==2000) | (df.Year==2005) | (df.Year==2010) | (df.Year==2015) | (df.Year==2020)]

#drop code column
df.drop("Code", axis = 1, inplace = True)

#Remove unmatched items from column
df = df[(df.Entity!="Cyprus") & (df.Entity != "EU-27") & (df.Entity != "EU27+1") & (df.Entity != "Malta")]

#Make a pivot
df = pd.pivot_table(df, index = "Entity", columns = "Year")
df
df.columns = ["2000", "2005", "2010", "2015", "2020"]
df = df.reset_index()
df.rename({"Entity":"name"}, axis=1, inplace = True)

selected_countries = europe[europe.name.isin(list(df.name))]
selected_countries = selected_countries.merge(df, on = "name", how = "left")

#Range of Variable you see as map color. Here I select the minimum and maximum of all the years selected. To have an uniform color range in the maps for all years,
#I select the minimum and maximum emissions intensity values for all years and all countries as the range of the variable.

vmin = selected_countries[["2000", "2005", "2010", "2015", "2020"]].min().min()
vmax = selected_countries[["2000", "2005", "2010", "2015", "2020"]].max().max()

fig,axs = plt.subplots(2,3) #3columns and 1 row
fig.suptitle("Emission Intensity from electricity generation in Europe 2000 - 2020", fontweight = "bold", fontsize = 15)

#Adjust spaces between rows
plt.subplots_adjust(bottom = 0.2, top = 0.9, hspace = 0.25)
axs[0,0] = europe.plot(color = "whitesmoke", edgecolor = "black", ax = axs [0,0])
selected_countries.plot("2000", cmap = "Reds", edgecolor = "black", ax = axs [0,0], vmin = vmin, vmax = vmax)
axs[0,0].set_title("2000")
axs[0,0].xaxis.set_visible(False)

axs[0,1] = europe.plot(color = "whitesmoke", edgecolor = "black", ax = axs [0,1])
selected_countries.plot("2005", cmap = "Reds", edgecolor = "black", ax = axs [0,1], vmin = vmin, vmax = vmax)
axs[0,1].set_title("2005")
axs[0,1].xaxis.set_visible(False)
axs[0,1].yaxis.set_visible(False)

axs[0,2] = europe.plot(color = "whitesmoke", edgecolor = "black", ax = axs [0,2])
selected_countries.plot("2010", cmap = "Reds", edgecolor = "black", ax = axs [0,2], vmin = vmin, vmax = vmax)
axs[0,2].set_title("2010")
axs[0,2].xaxis.set_visible(False)
axs[0,2].yaxis.set_visible(False)

axs[1,0] = europe.plot(color = "whitesmoke", edgecolor = "black", ax = axs [1,0])
selected_countries.plot("2015", cmap = "Reds", edgecolor = "black", ax = axs [1,0], vmin = vmin, vmax = vmax)
axs[1,0].set_title("2015")

axs[1,1] = europe.plot(color = "whitesmoke", edgecolor = "black", ax = axs [1,1])
selected_countries.plot("2020", cmap = "Reds", edgecolor = "black", ax = axs [1,1], vmin = vmin, vmax = vmax)
axs[1,1].set_title("2020")
axs[1,1].yaxis.set_visible(False)

axs[1,2] = europe.plot(color = "whitesmoke", edgecolor = "black", ax = axs [1,2])
axs[1,2].set_title("Future?")
axs[1,2].yaxis.set_visible(False)

#add colorbar
cax = fig.add_axes([0.92, 0.2, 0.03, 0.7]) #[Left, bottom, width, height]
sm = plt.cm.ScalarMappable(cmap = "Reds", norm = plt.Normalize(vmin = vmin, vmax = vmax))

lgd = fig.colorbar(sm, cax = cax).set_label("gCO$_2$e/kWh", rotation = 0, y = 1.05, labelpad = -35)
plt.savefig("Emissions Intensity over the past two decades.jpeg", dpi = 300)
plt.show()

df
df.set_index("name", inplace = True)
df = df.T
df
        
df[["Estonia", "Poland", "Sweden", "United Kingdom", "Germany", "France"]]
df[["Estonia", "Poland", "Sweden", "United Kingdom", "Germany", "France"]].plot(marker = "o",linestyle = "dashed", figsize = (8,6))
plt.title("Carbon Intensity of Electricity Generation of Selected Countries")
plt.xlabel("Years")
plt.ylabel("gCO$_2$e/kWh")
lgd = plt.legend(bbox_to_anchor = (1,1))
plt.savefig("Selective Countries Carbon Intensity",
            dpi = 300,
            bbox_extra_artists = (lgd,),
            bbox_inches = "tight")
plt.show()
selected_countries["geometry"].representative_point()
#Getting the lan and the lat here from geometry data
selected_countries["coordinates"] = selected_countries["geometry"].apply(lambda x: x.representative_point().coord[:][0])
selected_countries.head()

fix, ax = plt.subplots()
ax = europe.plot(color = "whitesmoke",
                 edgecolor = "black",
                 ax = ax)

plt.show

#add name of countries to the figure
for idx, row in selected_countries.iterrows():
    plt.annotate(text = row["name"], xy = row["coordinate"],
                 horizontalalignment = "center", color = "black", fontsize = 10, fontweight = "light")
    
